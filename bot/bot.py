import os
import re
import json
import asyncio
from datetime import datetime, timedelta, timezone
from typing import Optional, Tuple

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder
from jose import jwt
import httpx

# ========= –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è =========
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
FRONTEND_URL = (os.getenv("FRONTEND_URL") or "https://app.minemduslar.ru").rstrip("/")
BACKEND_BASE_URL = (os.getenv("BACKEND_BASE_URL") or "https://api.minemduslar.ru").rstrip("/")

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ ‚Äî Telegram user_id: –º–æ–∂–Ω–æ JSON –∏–ª–∏ "1,2,3"
ROLE_MANAGERS_ENV = os.getenv("ROLE_MANAGERS", "[]")
try:
    ADMINS = {int(x) for x in json.loads(ROLE_MANAGERS_ENV)}
except Exception:
    ADMINS = {int(x) for x in re.split(r"[,\s]+", ROLE_MANAGERS_ENV.strip()) if x}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–ø—É—Å–∫–∞ JWT (–¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –±—ç–∫–æ–º)
JWT_SECRET = os.getenv("JWT_SECRET", "")
JWT_ISSUER = os.getenv("JWT_ISSUER", "duslar-bot")
JWT_AUDIENCE = os.getenv("JWT_AUDIENCE", "admin")
JWT_TTL_SECONDS = int(os.getenv("JWT_TTL_SECONDS", "300"))  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

ALLOWED_ROLES = {"user", "organizer", "admin"}  # –ø–æ–¥—Å—Ç—Ä–æ–π –ø–æ–¥ —Å–≤–æ–∏ —Ä–æ–ª–∏

# ========= aiogram =========
bot = Bot(TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
router = types.Router()
dp.include_router(router)

# ========= JWT helpers =========
def make_admin_jwt(tg_id: int) -> str:
    """
    –í—ã–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–π JWT: —Ä–æ–ª—å admin, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä ‚Äî Telegram user_id.
    –ë—ç–∫ –±—É–¥–µ—Ç –¥–æ–≤–µ—Ä—è—Ç—å —Ç–∞–∫–æ–º—É —Ç–æ–∫–µ–Ω—É, –µ—Å–ª–∏ SECRET/ISS/AUD —Å–æ–≤–ø–∞–¥–∞—é—Ç.
    """
    now = datetime.now(timezone.utc)
    payload = {
        "sub": str(tg_id),
        "role": "admin",
        "iss": JWT_ISSUER,
        "aud": JWT_AUDIENCE,
        "iat": int(now.timestamp()),
        "exp": int((now + timedelta(seconds=JWT_TTL_SECONDS)).timestamp()),
    }
    token = jwt.encode(payload, JWT_SECRET, algorithm="HS256")
    return token

# ========= –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ =========
def parse_changerole(text: str, args: Optional[str]) -> Tuple[int, str]:
    # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º: /changerole 123 manager  –∏  /changerole/123/manager
    if args:
        parts = args.strip().replace(",", " ").split()
    else:
        parts = [p for p in text.split("/") if p]
        parts = parts[1:]  # —Å—Ä–µ–∑–∞–µ–º 'changerole'
    if len(parts) < 2:
        raise ValueError("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å user_id –∏ role: /changerole 123 admin")
    user_id = int(parts[0])
    role = parts[1].lower()
    return user_id, role

async def call_set_role(user_id: int, role: str, admin_token: str) -> Tuple[bool, str]:
    """
    PATCH –∫ –≤–∞—à–µ–º—É API. –ü—É—Ç—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º: PATCH /api/v1/admin/users/{user_id}/role  body: {"role": "manager"}
    """
    url = f"{BACKEND_BASE_URL}/api/v1/admin/users/{user_id}/role"
    headers = {"Authorization": f"Bearer {admin_token}"}
    payload = {"role": role}
    timeout = httpx.Timeout(10.0, connect=5.0)
    async with httpx.AsyncClient(timeout=timeout) as client:
        r = await client.patch(url, json=payload, headers=headers)
    if r.status_code // 100 == 2:
        return True, ""
    try:
        detail = r.json()
    except Exception:
        detail = r.text
    return False, f"API {r.status_code}: {detail}"

# ========= –ö–æ–º–∞–Ω–¥—ã =========
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=types.WebAppInfo(url=f"{FRONTEND_URL}/"))
    kb.button(text="–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", url=f"{FRONTEND_URL}/")
    kb.adjust(1)
    await message.answer(
        "–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º! üëã\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
        reply_markup=kb.as_markup(),
    )

@router.message(Command("getadminjwt"))
async def cmd_getadminjwt(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    token = make_admin_jwt(message.from_user.id)
    await message.answer(
        "–í–æ—Ç –≤–∞—à –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–π admin JWT (–¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç):\n\n"
        f"`{token}`\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ:\n"
        "`Authorization: Bearer <TOKEN>`",
        parse_mode="Markdown",
    )

@router.message(Command("changerole"))
async def cmd_changerole(message: types.Message, command: CommandObject):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –ù–µ—Ç –ø—Ä–∞–≤. –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    try:
        user_id, role = parse_changerole(message.text, command.args)
    except Exception as e:
        await message.reply(f"‚ùó {e}\n–ü—Ä–∏–º–µ—Ä—ã:\n/changerole 123 admin\n/changerole/123/admin")
        return
    if role not in ALLOWED_ROLES:
        await message.reply(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å: {role}. –†–∞–∑—Ä–µ—à–µ–Ω–æ: {', '.join(sorted(ALLOWED_ROLES))}")
        return

    await message.reply("‚è≥ –ú–µ–Ω—è—é —Ä–æ–ª—å‚Ä¶")

    # –≤—ã–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π admin-JWT –∏ –∏–¥—ë–º –≤ API
    token = make_admin_jwt(message.from_user.id)
    ok, err = await call_set_role(user_id, role, token)

    if ok:
        await message.reply(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ **{role}**.")
    else:
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å: {err}")

# ========= –ó–∞–ø—É—Å–∫ =========
async def main():
    if not TELEGRAM_BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    if not (JWT_SECRET and BACKEND_BASE_URL):
        raise RuntimeError("–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å JWT_SECRET –∏ BACKEND_BASE_URL")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
