import os
import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import Optional

import httpx
from jose import jwt

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    WebAppInfo,
)

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ =====
from app.core.config import settings  # <- —á–∏—Ç–∞–µ—Ç .env —á–µ—Ä–µ–∑ pydantic-settings

# ---------- –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(levelname)s:%(name)s:%(message)s",
)
log = logging.getLogger("duslar-bot")

# ---------- –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã / –æ–∫—Ä—É–∂–µ–Ω–∏–µ ----------
BOT_TOKEN = settings.telegram_bot_token.get_secret_value()

# –ë–∞–∑–æ–≤—ã–π URL API (–±–µ–∑ /api/v1 –≤ .env)
API_BASE = (settings.backend_base_url or "").rstrip("/")
if not API_BASE:
    raise RuntimeError("BACKEND_BASE_URL is not set")
API_V1 = f"{API_BASE}/api/v1"

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –Ω–∏–∫–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
# –ø—Ä–∏–º–µ—Ä: ADMIN_USERNAMES="alice,bob,@Charlie"
ADMIN_USERNAMES = {
    u.strip().lstrip("@").lower()
    for u in os.getenv("ADMIN_USERNAMES", "").split(",")
    if u.strip()
}

# –ê–¥–º–∏–Ω—Å–∫–∏–µ Telegram ID –∏–∑ .env -> ROLE_MANAGERS (–≤–∞—à Settings —É–∂–µ —ç—Ç–æ –ø–∞—Ä—Å–∏—Ç)
ADMIN_IDS = set(settings.role_managers or [])

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ä–æ–ª–∏ (–ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è)
ALLOWED_ROLES = {"user", "organizer", "admin"}

# JWT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—à–µ–º—É –¥–µ–∫–æ–¥–µ—Ä—É –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
JWT_SECRET = settings.jwt_secret.get_secret_value()
JWT_ISSUER = os.getenv("JWT_ISSUER", "duslar-bot")
JWT_AUDIENCE = os.getenv("JWT_AUDIENCE", "admin")
JWT_TTL_DAYS = int(os.getenv("JWT_TTL_DAYS", "14"))


def make_admin_jwt(sub: str) -> str:
    """
    –í—ã–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-JWT, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥—ë—Ç —á–µ—Ä–µ–∑ –≤–∞—à require_admin.
    –ü–æ–ª—è: sub, role=admin, iss, aud, iat, exp.
    """
    now = datetime.now(timezone.utc)
    payload = {
        "sub": str(sub),
        "role": "admin",
        "iss": JWT_ISSUER,
        "aud": JWT_AUDIENCE,
        "iat": int(now.timestamp()),
        "exp": int((now + timedelta(days=JWT_TTL_DAYS)).timestamp()),
    }
    token = jwt.encode(payload, JWT_SECRET, algorithm="HS256")
    return token


def is_admin(message: Message) -> bool:
    uid = message.from_user.id
    uname = (message.from_user.username or "").strip().lstrip("@").lower()
    return (uid in ADMIN_IDS) or (uname in ADMIN_USERNAMES)


def clean_username(raw: str) -> str:
    return raw.strip().lstrip("@")


def validate_role(raw: str) -> str:
    role = raw.strip().lower()
    if role not in ALLOWED_ROLES:
        raise ValueError(f"Unknown role '{raw}'. Allowed: {', '.join(sorted(ALLOWED_ROLES))}")
    return role


# ---------- aiogram ----------
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# –æ–±—â–∏–π HTTP –∫–ª–∏–µ–Ω—Ç (–∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ)
_http: Optional[httpx.AsyncClient] = None


async def on_startup():
    global _http
    _http = httpx.AsyncClient(timeout=10)
    log.info("Bot started. API=%s", API_V1)
dp.startup.register(on_startup)

async def on_shutdown():
    global _http
    if _http:
        await _http.aclose()
        _http = None
    log.info("Bot stopped")
dp.shutdown.register(on_shutdown)

@dp.message(CommandStart())
async def cmd_start(message: Message):
    app_url = str(settings.frontend_url or "").rstrip("/")
    if app_url:
        # –ö–Ω–æ–ø–∫–∞, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è MiniApp (WebAppInfo) ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ Telegram
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        web_app=WebAppInfo(url=app_url),
                    )
                ]
            ]
        )
    else:
        # –§–æ–ª–ª–±–µ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–∫–∏
        kb = None

    await message.answer(
        "–ú–∏—Ä –≤–∞–º! –≠—Ç–æ –±–æ—Ç –î—É—Å–ª–∞—Ä üëã\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
        reply_markup=kb,
    )

@dp.message(Command("count"))
async def cmd_count(message: Message):
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    token = make_admin_jwt(sub=message.from_user.id)
    url = f"{API_V1}/admin/users/count"
    headers = {"Authorization": f"Bearer {token}"}

    try:
        assert _http is not None
        resp = await _http.get(url, headers=headers)
        if resp.status_code == 200:
            data = resp.json()
            await message.answer(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {data.get('count', 0)}")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ API: {resp.status_code} {resp.text}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

@dp.message(Command("ping"))
async def cmd_ping(message: Message):
    await message.answer("pong")

# ---------- /changerole <username> <role> ----------
@dp.message(Command("changerole"))
async def changerole_spaces(message: Message):
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = (message.text or "").split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/changerole <username> <role>")
        return

    _, raw_user, raw_role = parts
    await do_change_role(message, raw_user, raw_role)


# ---------- /changerole/<username>/<role> ----------
@dp.message(F.text.regexp(r"^/changerole/([^/\s]+)/([^/\s]+)$"))
async def changerole_slashes(message: Message):
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    import re

    m = re.match(r"^/changerole/([^/\s]+)/([^/\s]+)$", message.text or "")
    raw_user, raw_role = m.group(1), m.group(2)
    await do_change_role(message, raw_user, raw_role)


async def do_change_role(message: Message, raw_username: str, raw_role: str):
    username = clean_username(raw_username)
    try:
        role = validate_role(raw_role)
    except ValueError as e:
        await message.answer(str(e))
        return

    token = make_admin_jwt(sub=message.from_user.id)

    url = f"{API_V1}/admin/users/by-username/{username}/role"
    payload = {"role": role}
    headers = {"Authorization": f"Bearer {token}"}

    try:
        assert _http is not None
        resp = await _http.patch(url, json=payload, headers=headers)
        if resp.status_code == 200:
            data = resp.json()
            await message.answer(
                f"‚úÖ –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: @{data.get('username','?')} ‚Üí {data.get('role','?')}"
            )
        elif resp.status_code == 404:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {resp.status_code} {resp.text}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        



async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass
